(defun bfs (node)
  "Breadth-First Search algorithm implementation."
  (let ((open-nodes (generate-next-nodes node)))
    (labels ((recursive-ft ()
               (let* ((current-node (pop open-nodes)))
                 (setf open-nodes (append open-nodes (generate-next-nodes current-node)))
                 (if (>= (node-score current-node) goal)
                     (return-from recursive-ft current-node))
                 (if (null open-nodes)
                     (error "There's no solution."))
                 (recursive-ft))))
      (recursive-ft))))

(defun dfs (node)
  "Depth-First Search algorithm implementation."
  (let ((open-nodes (generate-next-nodes node)))
    (labels ((recursive-ft ()
               (let* ((current-node (pop open-nodes)))
                 (if (>= (node-score current-node) goal)
                     (return-from recursive-ft current-node))
                 (setf open-nodes (append (generate-next-nodes current-node) open-nodes))
                 (if (null open-nodes)
                     (error "There's no solution."))
                 (recursive-ft))))
      (recursive-ft))))

(defun a-star (node)
  "A* Search algorithm implementation."
  (let ((open-nodes (generate-next-nodes node)))
    (labels ((recursive-ft ()
               (let* ((current-node (pop open-nodes)))
                 (if (null current-node)
                     (error "There's no solution."))
                 (if (>= (node-score current-node) goal)
                     (return-from recursive-ft current-node))
                 (setf open-nodes (sort (append (generate-next-nodes current-node) open-nodes)
                 #'(lambda(n1 n2) (< (node-heuristic n1) (node-heuristic n2)))))
                 (recursive-ft))))
      (recursive-ft))))

(defun calc-heuristic (board score)
  (/ (- objective score) (possible-average board)))

(defun possible-average (tab &optional n)  
  (cond  ((null tab) (/ (apply '+ n) (length n)))
         ((not (null (horse-position tab))) 
          (let ((pos (horse-position tab)))
            (possible-average (replace-cell (first pos) (second pos) tab))))
         (t (possible-average (cdr tab) (append n (remove nil (car tab)))))))